Golang for Java programmers
A quick presentation that makes it easy for seasoned Java developers to start programming in Golang
18:00 29 Jan 2016
Tags: go, java

OndÅ™ej Linek
Freelance Golang developer
me@ondralinek.cz
https://go.ondralinek.cz
@golang_cz

* What's Golang (Go)

- statically compiled and linked strong typed general purpose languge
- compiles into native code (x86, ia64/amd64, ARMvx...)
- garbage collected memory 
- non-OOP with a hint of functional programming
- does support pointers but lacks pointer arithemtic
- doesn't support threads but supports something called >go routines<
- *opinionated* - and that applies to pretty all things `Go`

* Go Toolbox

- `go`
- `go`
- `go`

- really all you need to have is `go`
- but there are tools that can help (`gb` being one of them)
- `godoc`, `goftm` are useful too

* Program structure

- function `main` in the package `main`

.code main/main.go

- `$GOPATH` - that's where all your source code lives, if not set it `$HOME/go`
- all your code is stored in packages
- the `main` package is special - it indicates a package where an exutable program is stored and can't be accessed from other packages
- that's why it's common to have a directory called `cmd` with the package `main`
- package name and directory name are not related (directory `foo` can contain package `bar`)
- unlike Java in Go there's not many packages
- some use monorepo (company wide) yet you're free to choose

* Recommended program structure

- to treat you application as a library you can follow this structure
.code structure.md

* What's in Go that's not in Java

- global functions - functions at the root level
- pointers - though limited to referencing and de-referencing - once you start using the `unsafe` you can do pointer arithmetic too
- multiple return values
- `for` and `if` with initializators
- type inference
- deferred statements with the `defer` keyword
- built-in support for testing (code and tools)
- built-in support for dependency management with `go get`
- all variables are initialized to 0, false, "" or nil
- support for the `C` language

* What's in Java that's not in Go

- virtual machine - `Go` compiles into native code
- objects - `Go` uses structs but lacks encapsulation, inheritence and polymorhism
- threads - `Java` supports threads, `Go` doesn't (not directly)
- threadlocal - `Go` has no threads and as such can't bind data to them.
- the ternary operator (`bool ? true : false`)
- the `while` loop
- exceptions - `Go` can do `panic` but that's pretty much it
- generics - no generic types, at all
- enumerations - but supports constant numerical generators via `iota`

* Go basics

- `if` can have intializers `if` `can,err:=canIDoIt();can` `&&` `err` `==` `nil` `{...}`
- `if` doesn't have the condition in brackets
- for looping there's only `for`
- for can be forever (`for{}`) or conditional `for` `i:=0;i<10;i++`
- `break` and `continue` work the same
- function can be variables `fun:=func(){...};fun()` is valid
- function can return more than one value
`func()(int,int){return` `1,2}`
- variable definition with type inference `a:=0` - a is an `int`
- pointer referencing with `&` and `*`
- parameters are passed by value
- `_` tells Go to ignore this variable, also used for import for side effects
- unused variables and imports are compilation errors

* Working with pointers
- to get a pointer to value use `a:=&b`
- to derefence a pointer use `b=*a`
- no pointer arithmetic
.code pointer/pointer.go

* Structs and composition
- structs are the closest you can get to classes in Java
- structs can be defined as types or ad-hoc (anonymous structs)
- structs can contain as many fields as required
- structs can have no fields at all
- structs can contain other structs, can compose of other structs
- definition and assignment can happen in one step

* Struct examples

.code structs/structs.go

* Receivers

- Types can have receivers
- They are similar to methods expect the `this` keyword is defined explicitely
- Receivers are value or pointer based
- It's much more usual to work with pointers

* Receiver example

.code receivers/receivers.go

* Interfaces

- interfaces prescribe functions only
- interfaces make sense with receivers
- every type can implement an interface
- interface implementation is implicit - by implementing all functions prescribed by the interface
- interface implementation is either by pointer or value
- pointers to interfaces make no sense
- every type implements an empty interface (`interface{}`)

* Interface example

.code interfaces/interfaces.go

* Arrays, Slices and Maps

- in Go there are only arrays, slices and maps
- arrays are always fixed length
- slices are dynamic length - i.e. can grow/shirk in runtime
- maps can contain any type as a value but and compareables as a key
- to add to a slice use the builtin `append` function
- to iterate over a slice use the `range` keyword
- to remove from a map use the `delete` function
- maps are not thread-safe, use mutexes to modify a map concurrently

* Arrays, Slices and Maps example

.code array/array.go

* Multithreading - channels

- `Go` uses so called `go routines`
- they're lightweight threads, internally an event loop akin to Node.js one. It's kind of cooperative multitasking.
- to communicate with and between go routines one can use mutexes and channels
- to create a channel use the builtin `make` function. note that channels are typed!
- once you're done with a channel call `close` on it

* Multithreading with channels

.code channels1/channels.go

* Multithreading with waitgroups

.code channels2/channels.go

* Multithreading - mutexes
- mutexes are for Go what `synchronized` is for Java
- don't try to pass mutex around by value - always use references

.code mutexes1/mutexes.go

* Working with time and intervals

- `time` package
- time is stored in the `time.Time` struct. Internally it's int64 nanosecond since/before 01/01/01 00:00:00 UTC
- interval are stored in `time.Duration`. It's just a synonym for int64 where 1 means 1 nanosecond
- parsing time is done with `time.Parse()`. The layout (format) date is `Mon` `Jan` `2` `15:04:05` `-0700` `MST` `2006`
- to get notified after some time use `time.After(time.Second)`
- to pause the current go routine use `time.Wait(time.Second)`

* Enumerations with iota

- `go` has no enumerations but can take advantage of constance numerical sequences

.code iota/iota.go

* Annotation and visibility scope

- Go has no annotations as we know them in Java but you can use tags
.code tags/tags.go
- each struct field can have multiple tags assigned
- if you want to read the tag value(s) you can use the `Value` type
- all variable, struct, function and interface names starting in lower case are not accessible outside of their package

* JSON

- built-in, no dependancy required
- Go can marshal and unmashal into specific types or into generic types (map[string]interface{})
- the simplest way to marhal JSON is to use `json.Marshal` function
- the simplest way to unmarshal JSON is to use `json.Unmarshal` function
- keep in mind that numbers unmarshal into `float64` unless you use specific type
- implement `json.Mashaller` or `json.Unmarshaller` interface to customize serialization to/from JSON

* JSON example

.code json/json.go

* HTTP

- Go natively supports both HTTP server and client
- includes full support for SSL/TLS
- support SSL sessions and keep-alive
- built in support for routing
- support for testing 
- and templating

* HTTP server

- it is common to launch your own server directly, without any framework
- routing is probably the only exception
.code httpServer/server.go

* HTTP client (including SSL)
- Go supports keep-alive only when you close response body
- `http.Client` and `http.Transport` are meant to be reused
.code http/client.go

* HTTP routing

- the only part normally delegated to a library/framwork
- gorilla mux is a popular choice
- support wildcards, parameter mappings and more

* Templating 

- Go has its own templating
- you can't do sphagety coding (create or call funtions), which is great
- to access data use `{{.}}` `{{.root}}` or `{{.root.leave}}`
- to iterate over a map use `{{range $key, $value := .root}}`...`{{end}}`
- to iterate over a slice use `{{range .root}}`{{.}}`{{end}}`

* Templating example

.code http/template.go

* Error handling

- Go has no exceptions
- you have to check return values
- error return values can be ignored
- you can call `panic` but that's more like Java's `Error`

* Error handling example

.code errors/errors.go

* Accessing SQL databases in Go

- accessing an SQL database handles the `database/sql` package
- you have to use drivers to access a specific implementation
- the `sql` package supports various scenarios out of the box, including transactions
- in Go you rarely use ORM, result mapping is however a common pattern
- NoSQL has no standards in Go 

* SQL example

.code sql/sql.go

* SQL mapping example

.code sql/mapping.go

* Testing applications in Go

- Go has a built-in support for testing
- you do not have to use 3rd party libraries
- test files end with `_test`.`go`
- test package may end with `_test` e.g. `main_test`
- to write a test just create a function with signature `func` `TestWhatever` `(t` `*testing`.`T)` `{}`
- to run a test in terminal do `go` `test` `name_of_test`.`go` or better yet `go` `test` `./...`

* Testing example

.code test/test_test.go

* Documenting code in Go

- documentation is not statically built - it's dynamically served by `godoc`
- your publicly accessible code can be viewed at http://godoc.org
- to document a function just write a comment on top of it
- structs, interfaces and so on follow the suite
- package documentation preceeds the `package` declaration
- longer package documentation resides in `doc.go`
- code examples are indented by at least 4 chars (very much like markdown)